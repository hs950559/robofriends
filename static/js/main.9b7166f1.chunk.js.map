{"version":3,"sources":["serviceWorker.js","components/card/Card.js","components/card-list/CardList.js","components/SearchBox.js","containers/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","robot","id","name","email","className","src","alt","CardList","props","cards","robots","map","item","key","SearchBox","type","placeholder","onChange","searchChange","ErrorBoundary","state","hasError","this","setState","children","Component","App","searchTerm","onSearchChange","event","target","value","fetch","then","res","json","filteredRobos","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCDSC,EAfF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACNC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACE,yBAAKC,UAAU,kCACb,yBACEA,UAAU,eACVC,IAAG,+BAA0BJ,EAA1B,iBACHK,IAAI,QAEN,wBAAIF,UAAU,mBAAmBF,GACjC,uBAAGE,UAAU,aAAaD,KCGjBI,EAZE,SAACC,GAChB,IAAMC,EAAQD,EAAME,OAAOC,KAAI,SAACC,GAC9B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKX,GAAID,MAAOY,OAGpC,OACE,6BACE,yBAAKR,UAAU,SAASK,KCKfK,EAbG,SAACN,GACjB,OACE,yBAAKJ,UAAU,qBACb,2BACEW,KAAK,OACLX,UAAU,eACVY,YAAY,eACZC,SAAUT,EAAMU,iBCaTC,G,kNAnBbC,MAAQ,CACNC,UAAU,G,kEAIVC,KAAKC,SAAS,CACZF,UAAU,M,+BAKZ,OAAIC,KAAKF,MAAMC,SACN,uDAEAC,KAAKd,MAAMgB,a,GAfIC,cCgDbC,E,4MA3CbN,MAAQ,CACNV,OAAQ,GACRiB,WAAY,I,EAadC,eAAiB,SAACC,GAChB,EAAKN,SAAS,CACZI,WAAYE,EAAMC,OAAOC,S,kEAZR,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACL,EAAKX,SAAS,CACZb,OAAQwB,S,+BAWN,IAAD,EACwBZ,KAAKF,MAA5BV,EADD,EACCA,OAAQiB,EADT,EACSA,WACVS,EAAgB1B,EAAO2B,QAAO,SAACzB,GACnC,OAAOA,EAAKV,KAAKoC,cAAcC,SAASZ,EAAWW,kBAGrD,OAAI5B,EAAO8B,OAEP,yBAAKpC,UAAU,wBACb,wBAAIA,UAAU,sCAAd,eACA,kBAAC,EAAD,CAAWc,aAAcI,KAAKM,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlB,OAAQ0B,MAKjB,wBAAIhC,UAAU,4BAAd,oB,GAvCKqB,aCAlBgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9b7166f1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({ robot }) => {\n  const { id, name, email } = robot;\n  return (\n    <div className=\"card card-body m-2 text-center\">\n      <img\n        className=\"card-img-top\"\n        src={`https://robohash.org/${id}?size=200x200`}\n        alt=\"img\"\n      />\n      <h5 className=\"card-title mt-2\">{name}</h5>\n      <p className=\"card-text\">{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card/Card\";\n\nconst CardList = (props) => {\n  const cards = props.robots.map((item) => {\n    return <Card key={item.id} robot={item} />;\n  });\n\n  return (\n    <div>\n      <div className=\"robos\">{cards}</div>\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = (props) => {\n  return (\n    <div className=\"w-50 mx-auto mb-2\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Search Robos\"\n        onChange={props.searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch() {\n    this.setState({\n      hasError: true,\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That's not good</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/card-list/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.scss\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nclass App extends Component {\n  state = {\n    robots: [],\n    searchTerm: \"\",\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((res) => {\n        this.setState({\n          robots: res,\n        });\n      });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({\n      searchTerm: event.target.value,\n    });\n  };\n\n  render() {\n    const { robots, searchTerm } = this.state;\n    const filteredRobos = robots.filter((item) => {\n      return item.name.toLowerCase().includes(searchTerm.toLowerCase());\n    });\n\n    if (robots.length) {\n      return (\n        <div className=\"container-fluid mt-2\">\n          <h1 className=\"text-center display-1 text-success\">ROBOFRIENDS</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <ErrorBoundary>\n            <CardList robots={filteredRobos} />\n          </ErrorBoundary>\n        </div>\n      );\n    } else {\n      return <h2 className=\"text-center text-warning\"> Loading... </h2>;\n    }\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/main.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}